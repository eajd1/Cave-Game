#pragma kernel Main
#include "/TriangulationShader.compute"

uint size;
float surface;
Texture3D<float4> noiseTexture;
AppendStructuredBuffer<float3> vertexBuffer;
SamplerState textureSampler {

};

float3 InterpolatePoints(float3 p1, float3 p2) {
    float t = (surface - noiseTexture.Sample(textureSampler, p1 / (size + 1))) / (noiseTexture.Sample(textureSampler, p2 / (size + 1)) - noiseTexture.Sample(textureSampler, p1 / (size + 1)));
    return p1 + t * (p2 - p1);
}

[numthreads(32,32,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
	if (id.x > size || id.y > size || id.z > size) {
		return;
	}
    float3 edges[12] = {
        InterpolatePoints((id.x, id.y, id.z), (id.x, id.y, id.z + 1)),
        InterpolatePoints((id.x, id.y, id.z + 1), (id.x + 1, id.y, id.z + 1)),
        InterpolatePoints((id.x + 1, id.y, id.z), (id.x + 1, id.y, id.z + 1)),
        InterpolatePoints((id.x, id.y, id.z), (id.x + 1, id.y, id.z)),
        InterpolatePoints((id.x, id.y + 1, id.z), (id.x, id.y + 1, id.z + 1)),
        InterpolatePoints((id.x, id.y + 1, id.z + 1), (id.x + 1, id.y + 1, id.z + 1)),
        InterpolatePoints((id.x + 1, id.y + 1, id.z), (id.x + 1, id.y + 1, id.z + 1)),
        InterpolatePoints((id.x, id.y + 1, id.z), (id.x + 1, id.y + 1, id.z)),
        InterpolatePoints((id.x, id.y, id.z), (id.x, id.y + 1, id.z)),
        InterpolatePoints((id.x, id.y, id.z + 1), (id.x, id.y + 1, id.z + 1)),
        InterpolatePoints((id.x + 1, id.y, id.z + 1), (id.x + 1, id.y + 1, id.z + 1)),
        InterpolatePoints((id.x + 1, id.y, id.z), (id.x + 1, id.y + 1, id.z))
    };

    float cubeVertices[8] = {
        noiseTexture.Sample(textureSampler, (id.x, id.y, id.z)).w,
        noiseTexture.Sample(textureSampler, (id.x, id.y, id.z + 1)).w,
        noiseTexture.Sample(textureSampler, (id.x + 1, id.y, id.z + 1)).w,
        noiseTexture.Sample(textureSampler, (id.x + 1, id.y, id.z)).w,
        noiseTexture.Sample(textureSampler, (id.x, id.y + 1, id.z)).w,
        noiseTexture.Sample(textureSampler, (id.x, id.y + 1, id.z + 1)).w,
        noiseTexture.Sample(textureSampler, (id.x + 1, id.y + 1, id.z + 1)).w,
        noiseTexture.Sample(textureSampler, (id.x + 1, id.y + 1, id.z)).w
    };

    int cubeCode = 0;
    for (int i = 0; i < 8; i++)
    {
        if (cubeVertices[i] < surface)
        {
            cubeCode |= 1 << i;
        }
    }

    for (int i = 0; i < 16; i++)
    {
        if (TriangulationTable[cubeCode][i] != -1)
        {
            vertexBuffer.Append(edges[TriangulationTable[cubeCode][i]]);
        }
    }
}
